
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA ID LCB LRB LSB RCB RRB RSB STRINGprogram : arr_list_rootarr_list_root : ID LSB obj_list RSBarr_list_root : LSB obj_list RSBobj_list_root : ID LRB obj_list RRBobj_list : obj_list obj_element COMMAobj_list : obj_list : LRB obj_list RRB COMMAobj_element : atomicdic_list_root : ID LCB dic_list RCBdic_list : dic_list dic_element COMMAdic_list : dic_element : ID COLON dic_valuedic_value : atomicdic_value : STRINGdic_value : arr_list_rootdic_value : obj_list_rootdic_value : dic_list_rootobj_element : arr_list_rootobj_element : obj_list_rootobj_element : dic_list_rootatomic : ID'
    
_lr_action_items = {'ID':([0,4,5,6,7,8,16,18,19,20,22,23,24,29,30,],[3,-6,-6,15,-6,15,15,-5,-6,-11,15,26,-7,15,-10,]),'LSB':([0,3,4,5,6,7,8,15,16,18,19,22,24,29,],[4,5,-6,-6,4,-6,4,5,4,-5,-6,4,-7,4,]),'$end':([1,2,9,17,],[0,-1,-3,-2,]),'RSB':([4,5,6,8,18,24,],[-6,-6,9,17,-5,-7,]),'LRB':([4,5,7,15,19,],[7,7,7,19,7,]),'RRB':([7,16,18,19,22,24,],[-6,21,-5,-6,25,-7,]),'COMMA':([9,10,11,12,13,14,15,17,21,25,27,28,31,32,33,34,35,36,],[-3,18,-8,-18,-19,-20,-21,-2,24,-4,-9,30,-12,-13,-14,-15,-16,-17,]),'LCB':([15,],[20,]),'RCB':([20,23,30,],[-11,27,-10,]),'COLON':([26,],[29,]),'STRING':([29,],[33,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'arr_list_root':([0,6,8,16,22,29,],[2,12,12,12,12,34,]),'obj_list':([4,5,7,19,],[6,8,16,22,]),'obj_element':([6,8,16,22,],[10,10,10,10,]),'atomic':([6,8,16,22,29,],[11,11,11,11,32,]),'obj_list_root':([6,8,16,22,29,],[13,13,13,13,35,]),'dic_list_root':([6,8,16,22,29,],[14,14,14,14,36,]),'dic_list':([20,],[23,]),'dic_element':([23,],[28,]),'dic_value':([29,],[31,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> arr_list_root','program',1,'p_program','parser.py',15),
  ('arr_list_root -> ID LSB obj_list RSB','arr_list_root',4,'p_arr_list_root_with_id','parser.py',22),
  ('arr_list_root -> LSB obj_list RSB','arr_list_root',3,'p_arr_list_root_without_id','parser.py',27),
  ('obj_list_root -> ID LRB obj_list RRB','obj_list_root',4,'p_obj_list_root','parser.py',32),
  ('obj_list -> obj_list obj_element COMMA','obj_list',3,'p_obj_list_obj_list','parser.py',37),
  ('obj_list -> <empty>','obj_list',0,'p_obj_list_lambda','parser.py',49),
  ('obj_list -> LRB obj_list RRB COMMA','obj_list',4,'p_obj_list_paran','parser.py',53),
  ('obj_element -> atomic','obj_element',1,'p_obj_element_atomic','parser.py',58),
  ('dic_list_root -> ID LCB dic_list RCB','dic_list_root',4,'p_dic_list_root','parser.py',63),
  ('dic_list -> dic_list dic_element COMMA','dic_list',3,'p_dic_list_dic_list','parser.py',68),
  ('dic_list -> <empty>','dic_list',0,'p_dic_list_lambda','parser.py',77),
  ('dic_element -> ID COLON dic_value','dic_element',3,'p_dic_element','parser.py',81),
  ('dic_value -> atomic','dic_value',1,'p_dic_value_id','parser.py',86),
  ('dic_value -> STRING','dic_value',1,'p_dic_value_string','parser.py',91),
  ('dic_value -> arr_list_root','dic_value',1,'p_dic_value_arr_list_root','parser.py',96),
  ('dic_value -> obj_list_root','dic_value',1,'p_dic_value_obj_list_root','parser.py',101),
  ('dic_value -> dic_list_root','dic_value',1,'p_dic_value_dic_list_root','parser.py',106),
  ('obj_element -> arr_list_root','obj_element',1,'p_obj_element_arr_list_root','parser.py',111),
  ('obj_element -> obj_list_root','obj_element',1,'p_obj_element_obj_list_root','parser.py',116),
  ('obj_element -> dic_list_root','obj_element',1,'p_obj_element_dic_list_root','parser.py',121),
  ('atomic -> ID','atomic',1,'p_atomic','parser.py',126),
]
